Revising the rules:

================
T1 |- A <: H -| T2 ~~> B
================

T |- Int <: Int -| T ~~> Int

FV_ex(A) = .            
--------------------------------------- (Alternative/better rule)
T |- ^a <: A -| ([A/^a] T) ~~> A

FV_ex(A) = .            
--------------------------------------- (Alternative/better rule)
T |- A <: ^a -| ([A/^a] T) ~~> A

T |- A <: Top -| T ~~> A        (A can have existentials ? Or can I assume A cannot have existentials?)

T1 |- C <: A -| T2 ~~> A'         T2 |- B <: D -| T3 ~~> B'
-------------------------------------------------
T |- A -> B <: C -> D -| T3 ~~> A' -> B'

FV_ex(A) = .        T1 |- A => e => C       T1 |- B <: H -| T2 ~~> D
---------------------------------------------------------   
T1 |- A -> B <: [e] -> H -| T2 ~~> A -> D
 
FV_ex(A) != .         T1 |- Top => e => C      T1 |- C <: A -| T2 ~~> A'           T2 |- B <: H -| T3 ~~> D
----------------------------------------------------------------------------------------
T1 |- A -> B <: [e] -> H -| T3 ~~> A' -> D

T1, a |- A <: B -| T2, a, T3 ~~> C
----------------------------------------------- (What about this rule?) 
T1 |- forall a. A <: forall a. B -| T2, T3 ~~> forall a. C

T1, a |- A <: B -| T2, a, T3 ~~> C
----------------------------------------------- (What about this rule?) 
T1 |- forall a. A <: forall a. B -| T2 ~~> forall a. C

T, ^a |- [^a/a] A <: [e] -> H -| T1, ^a, T2 ~~> B
-----------------------------------------
T |- forall a. A <: [e] -> H -| T1 ~~> B


-- forall a. a -> a <: [1] -> Top ~~> Int -> Int

====== Example ===============
^a |- (Int -> ^a) -> ^a <: [\x. x + 1] -> Top
---------------------------------------
forall a. (Int -> a) -> a <: [\x. x + 1] -> Top

g : forall a. (Int -> a) -> a

g (\x. x + 1)
===========================

======== Example 1==========
T := id : forall a. a -> a


T |-1 id : Int -> Int       T |-0 1 : Int 
----------------------------------
T |-0 id 1  : Int
=========================

======== Example 2 ============
T := g : forall a. (a -> a) -> a, x : Int -> Int


T |-1 g : (Int -> Int) -> Int       T |-0 x : Int -> Int 
-------------------------------------------
T |-0 g x  : Int
============================


======== Example 3 ===============
T := g : forall a. a -> (a -> a) -> a


T |-0 g 1 : (Int -> Int) -> Int       T |-8 (\x. x)  : Int -> Int 
--------------------------------------------------
T |-0 (g 1) (\x. x)  : Int
===============================

==== Example to think about =========
f 1 : Int -> Int
f 1 : String -> Int

f 1 : forall a. a -> Int

=======Example to think about =======
T ::= f : forall a. (Int -> Int) -> a -> Int

-----------
. |- f (\x. x)


^a |- (Int -> Int) -> ^a -> Int <: [\x. x] -> Top
-------------------------------------------
. |- forall a. (Int -> Int) -> a -> Int <: [\x. x] -> Top
=============================



succ : Int -> Int
===========================

Context substitution:

[A/^a] .                    = .
[A/^a] (T, ^a)            = T, ^a = A       where T |- A
[A/^a] (T, ^a = A)     = T, ^a = A



FV_ex(A) = .            T1 |- A
---------------------------------------  (Could `T |- A` imply that A has no free variables?)
T1, ^a = A, T2 |- A <: ^a -| T1, ^a = A, T2 ~~> A

FV_ex(A) = .            T1 |- A
---------------------------------------
T1, ^a = A, T2 |- ^a <: A -| T1, ^a = A, T2 ~~> A




How about:


FV_ex(A) != .        T1 |- Top => e => C      T1 |- C <: A -| T2 ~~> A'           T2 |- B <: H -| T2 ~~> D
----------------------------------------------------------------------------------------------   
T1 |- A -> B <: [e] -> H -| T2 ~~> A' -> D


---------------------------------
^a, ^b |- b -> a -> <: [1] -> ['c'] -> Top
------------------------------------
^a |- forall b. b -> a -> <: [1] -> ['c'] -> Top
-----------------------------------------
. |- forall a. forall b. b -> a -> <: [1] -> ['c'] -> Top

. |- forall a. a -> forall b. b -> b <: [1] -> [x]

g : forall a. a -> forall b. b -> b

g 1 x


g : forall a. Int -> forall b. a -> b -> b

g 1 'c'


================
T1 |- A <: H -| T2 ~~> B
================

T |- Int <: Int -| T ~~> Int

FV_ex(A) = .           T1 |- A         
----------------------------------- (Could `T |- A` imply that A has no free variables?)
T1, ^a, T2 |- ^a <: A -| T1, ^a = A, T2 ~~> A

FV_ex(A) = .           T1 |- A
------------------------------------
T1, ^a, T2 |- A <: ^a -| T1, ^a = A, T2 ~~> A

T |- A <: Top -| T ~~> A        (A can have existentials ? Or can I assume A cannot have existentials?)

T1 |- C <: A -| T2 ~~> A'         T2 |- B <: D -| T3 ~~> B'
--------------------------------------------
T |- A -> B <: C -> D -| T3 ~~> A' -> B'

FV_ex(A) = .        T1 |- A => e => C       T1 |- B <: H -| T2 ~~> D
----------------------------------------------------   
T1 |- A -> B <: [e] -> H -| T2 ~~> A -> D
 
FV_ex(A) = s     s != .        T1 |- Top => e => C      T1 |- C <: A -| T2 ~~> A'           T2\s |- s_T2(B) <: H -| T2\s ~~> D
----------------------------------------------------------------------------------------------   
T1 |- A -> B <: [e] -> H -| T2\s ~~> A' -> D

T1, a |- A <: B -| T2, a,T3 ~~> C
--------------------------------------- (maybe T3 is empty: all existentials must be solved?) 
T1 |- forall a. A <: forall a. B -| T2 ~~> forall a. C

T, ^a |- [^a/a] A <: [e] -> H -| T' ~~> B
---------------------------------
T |- forall a. A <: [e] -> H -| T' ~~> forall a. B

How about:

FV_ex(A) = .
---------------------------------------
T1, ^a = A, T2 |- A <: ^a -| T1, ^a = A, T2 ~~> A

FV_ex(A) = .
---------------------------------------
T1, ^a = A, T2 |- ^a <: A -| T1, ^a = A, T2 ~~> A

FV_ex(A) != .        T1 |- Top => e => C      T1 |- C <: A -| T2 ~~> A'           T2 |- B <: H -| T2 ~~> D
----------------------------------------------------------------------------------------------   
T1 |- A -> B <: [e] -> H -| T2 ~~> A' -> D


Note: Is the output type free of existential variables?

Worklist Algorithm, for subtyping:

============
T1 |- A <: H | S
============

T |- Int <: Int | S                           ---> T | S, Int
T |- ^a <: A  | S                             ---> [^a = A] T | S, A        when FV_ex(A) = .
T |- A <: ^a  | S                             ---> [^a = A] T | S, A        when FV_ex(A) = .
T |- A <: Top | S                           ---> T | S, A                      when FV_ex(A) = .
T |- A -> B <: C -> D | S              ---> T |> B <: D |- C <: A | S
T |> | S, A', B'                                ---> T | S, A' -> B' 
T |- A -> B <: [e] -> H | S             ---> T |- B <: H | S, A                  when T |- A => e => C /\ FV_ex(A) = . 
T |- A -> B <: [e] -> H | S             ---> T |> B <: D |- C <: A | S      when T |- Top => e => C /\ FV_ex != .
T |- forall a . A <: forall a. B | S    ---> T, a |- A <: B  | S
T, a | S, A                                      ---> T | S, forall a. A
T |- forall a. A <: [e] -> H | S       ---> T, ^a |- [^a/a] A <: [e] -> H | S

Worklist Algorithm for Typing:

==========
T |- H => e | S
==========

T |- Top => i | S                 ---> T | S, Int
T |- Top => x | S                ---> T | S, A         when x : A in T
T |- Top => e : A  | S          ---> T \ A => e | S, A
T \ | S, B                              ---> T | S            
T |- Top => /\a. e | S         ---> T, a |- Top => e | S
T, a | S, A                            ---> T | S, forall a. A
T |- H => e1 e2 | S             ---> T ! [e2] -> H => e1 | S
T ! | S, A -> B                      ---> T | S, B

======
Example:
======

g : forall a. forall b. a -> b -> b

g 1

^a -> ^b -> ^b 
----------------------------
forall b. ^a -> b -> b <: [1] -> Top

---------------------------------
forall b. ^a -> b -> b <: [1] -> [2] -> Top



forall a. forall b. a -> b -> b <:1 [1] -> Top ~~> forall b. Int -> b -> b


forall a. forall b. a -> b -> b <:1 [1] -> Top       (can only use instantiation 1 time)


g : forall a. a -> a

x : Top

g x

^a -> ^a <: [x] -> Top

Top <: ^a 
