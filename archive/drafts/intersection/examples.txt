((λx. x) : (Int → Int) & (Bool → Bool)) 1


                                                                                  Int <:∞ Int     Int <:Z Int
-------------------------------------------- And                                  ------------------------------- S-Arr
. ⊢∞ λx. x :  (Int → Int) & (Bool → Bool)                                         Int → Int <:S Z Int → Int
-------------------------------------------------------------------------- Ann    --------------------------------------------- S-And-J
. ⊢Z  ((λx. x) : (Int → Int) & (Bool → Bool) : (Int → Int) & (Bool → Bool)        (Int → Int) & (Bool → Bool) <:S Z Int → Int
------------------------------------------------------------------------------------------------------------------------------- Sub
. ⊢S Z  ((λx. x) : (Int → Int) & (Bool → Bool)) : Int → Int         . ⊢Z 1 : Int
------------------------------------------------------------------------------------------- App
. ⊢Z ((λx. x) : (Int → Int) & (Bool → Bool)) 1 : Int



. ⊢ 
---------------------------------------------------------------------------- Ann
. ⊢ □ ⇒ (λx. x) : (Int → Int) & (Bool → Bool) ⇒ (Int → Int) & (Bool → Bool)       (Int → Int) & (Bool → Bool) <: [1] → □ ~> Int → Int
-------------------------------------------------------------------------------------------------------------------------------- Sub
. ⊢ [1] → □ ⇒ (λx. x) : (Int → Int) & (Bool → Bool) ⇒ Int → Int
------------------------------------------------------------------ App
. ⊢ □ ⇒ ((λx. x) : (Int → Int) & (Bool → Bool)) 1 ⇒ Int



eval [("x", True)] (Var "x") = True
eval [("x", True)] (Not (Var "x")) = False
eval [("x", True), ("y", False)] (Var "x" :|: Var "y") = True  -- logical or
eval [("x", True), ("y", False)] (Var "x" :&: Var "y") = False  -- logical and
