module Record.Soundness where

open import Record.Prelude
open import Record.Common
open import Record.Decl
open import Record.Decl.Properties renaming (‚ä¢strengthen-0 to ‚ä¢d-strengthen-0)
open import Record.Algo
open import Record.Algo.Properties renaming (‚ä¢strengthen-0 to ‚ä¢a-strengthen-0)

infix 5 _‚áà
_‚áà : Apps ‚Üí Apps
_‚áà = up 0

infix 4 _‚ä©_‚áö_
data _‚ä©_‚áö_ : Env ‚Üí Apps ‚Üí AppsType ‚Üí Set where
  ‚ä©none‚áö : ‚àÄ {Œì}
    ‚Üí Œì ‚ä© [] ‚áö []

  ‚ä©cons‚áö : ‚àÄ {Œì es As e A}
    ‚Üí Œì ‚ä© es ‚áö As
    ‚Üí Œì ‚ä¢ ‚ô≠ ‚àû # e ‚¶Ç A
    ‚Üí Œì ‚ä© (e ‚à∑a es) ‚áö (A ‚à∑a As)

  ‚ä©consl : ‚àÄ {Œì es As l}
    ‚Üí Œì ‚ä© es ‚áö As
    ‚Üí Œì ‚ä© (l ‚à∑l es) ‚áö (l ‚à∑l As)


-- after adding restrictin to s-and‚ÇÅ and s-and‚ÇÇ, we can have a nice inversion lemma
‚â§z-inv : ‚àÄ {A A'}
  ‚Üí A ‚â§ ‚ô≠ Z # A'
  ‚Üí A ‚â° A'
‚â§z-inv ‚â§Z = refl
‚â§z-inv (‚â§and‚ÇÅ A‚â§A' x) = ‚ä•-elim (x refl)
‚â§z-inv (‚â§and‚ÇÇ A‚â§A' x) = ‚ä•-elim (x refl)

----------------------------------------------------------------------
--+                                                                +--
--+                             Subst                              +--
--+                                                                +--
----------------------------------------------------------------------

size-apps : Apps ‚Üí ‚Ñï
size-apps [] = 0
size-apps (_ ‚à∑a as) = 1 + size-apps as
size-apps (_ ‚à∑l as) = 1 + size-apps as

size-ccounter : CCounter ‚Üí ‚Ñï
size-ccounter Z = 0
size-ccounter ‚àû = 1
size-ccounter (S‚áê j) = 1 + size-ccounter j
size-ccounter (Sl j) = 1 + size-ccounter j

size-counter : Counter ‚Üí ‚Ñï
size-counter (‚ô≠ j) = size-ccounter j
size-counter (S‚áí i) = 1 + size-counter i

size-type : Type ‚Üí ‚Ñï
size-type Int = 0
size-type Float = 0
size-type Top = 0
size-type (A `‚Üí B) = 1 + size-type A + size-type B
size-type (A & B) = 1 + size-type A + size-type B
size-type œÑ‚ü¶ l ‚Ü¶ A ‚üß = 1 + size-type A

size-ccounter>0 : ‚àÄ {k j}
  ‚Üí size-ccounter j < k
  ‚Üí 0 < k
size-ccounter>0 {k = k} {j = Z} sz = sz
size-ccounter>0 {k = k} {j = ‚àû} sz = <-trans (s‚â§s z‚â§n) sz
size-ccounter>0 {k = suc k} {j = S‚áê j} sz = s‚â§s z‚â§n
size-ccounter>0 {k = suc k} {j = Sl j} sz = s‚â§s z‚â§n

size-counter>0 : ‚àÄ {k i}
  ‚Üí size-counter i < k
  ‚Üí 0 < k
size-counter>0 {suc i} {k} sz = s‚â§s z‚â§n

size-type-+-l : ‚àÄ {A B k}
  ‚Üí size-type A + size-type B < k
  ‚Üí size-type A < k
size-type-+-l sz = m+n<o‚áím<o sz

size-type-+-r : ‚àÄ {A B k}
  ‚Üí size-type A + size-type B < k
  ‚Üí size-type B < k
size-type-+-r sz = m+n<o‚áín<o sz

-- a bunch of rewriting lemmas
_+++_ : Apps ‚Üí Apps ‚Üí Apps
[] +++ as‚ÇÇ = as‚ÇÇ
(e ‚à∑a as‚ÇÅ) +++ as‚ÇÇ = e ‚à∑a (as‚ÇÅ +++ as‚ÇÇ)
(l ‚à∑l as‚ÇÅ) +++ as‚ÇÇ = l ‚à∑l (as‚ÇÅ +++ as‚ÇÇ)

data AppsDes (as : Apps) : Set where

  des-app : ‚àÄ x xs
    ‚Üí as ‚â° xs +++ (x ‚à∑a [])
    ‚Üí AppsDes as

  des-prj : ‚àÄ l xs
    ‚Üí as ‚â° xs +++ (l ‚à∑l [])
    ‚Üí AppsDes as  

apps-destruct : ‚àÄ as
  ‚Üí 0 < size-apps as
  ‚Üí AppsDes as
apps-destruct (x ‚à∑a []) (s‚â§s sz) = des-app x [] refl
apps-destruct (x ‚à∑a (y ‚à∑a as)) (s‚â§s sz) with apps-destruct (y ‚à∑a as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑a xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑a xs) refl
apps-destruct (x ‚à∑a (y ‚à∑l as)) (s‚â§s sz) with apps-destruct (y ‚à∑l as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑a xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑a xs) refl
apps-destruct (x ‚à∑l []) sz = des-prj x [] refl
apps-destruct (x ‚à∑l (y ‚à∑a as)) (s‚â§s sz) with apps-destruct (y ‚à∑a as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑l xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑l xs) refl
apps-destruct (x ‚à∑l (y ‚à∑l as)) (s‚â§s sz) with apps-destruct (y ‚à∑l as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑l xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑l xs) refl

pattern ‚ü¶_‚üßa z = z ‚à∑a []
pattern ‚ü¶_‚üßl z = z ‚à∑l []

-- tinker with size

size-+++-distri : ‚àÄ xs ys
  ‚Üí size-apps (xs +++ ys) ‚â° size-apps xs + size-apps ys
size-+++-distri [] ys = refl
size-+++-distri (x ‚à∑a xs) ys rewrite size-+++-distri xs ys = refl
size-+++-distri (x ‚à∑l xs) ys rewrite size-+++-distri xs ys = refl

size-apps-+++a : ‚àÄ x xs k
  ‚Üí suc (size-apps (xs +++ ‚ü¶ x ‚üßa)) ‚â§ suc k
  ‚Üí suc (size-apps xs) < suc k
size-apps-+++a x xs k (s‚â§s sz) rewrite size-+++-distri xs ‚ü¶ x ‚üßa | +-comm 1 (size-apps xs) = s‚â§s sz

size-apps-+++l : ‚àÄ l xs k
  ‚Üí suc (size-apps (xs +++ ‚ü¶ l ‚üßl)) ‚â§ suc k
  ‚Üí suc (size-apps xs) < suc k
size-apps-+++l l xs k (s‚â§s sz) rewrite size-+++-distri xs ‚ü¶ l ‚üßl | +-comm 1 (size-apps xs) = s‚â§s sz

rw-apps-gen : ‚àÄ (es) {e es'}
  ‚Üí e ‚ñª (es +++ es') ‚â° (e ‚ñª es) ‚ñª es'
rw-apps-gen [] = refl
rw-apps-gen (x ‚à∑a es) = rw-apps-gen es
rw-apps-gen (x ‚à∑l es) = rw-apps-gen es

rw-apps-a : ‚àÄ es e x
  ‚Üí e ‚ñª (es +++ ‚ü¶ x ‚üßa) ‚â° (e ‚ñª es) ¬∑ x
rw-apps-a es e x = rw-apps-gen es {e = e} {es' = ‚ü¶ x ‚üßa}

up-+++-distri-a : ‚àÄ xs x
  ‚Üí up 0 (xs +++ ‚ü¶ x ‚üßa) ‚â° (up 0 xs) +++ (up 0 ‚ü¶ x ‚üßa)
up-+++-distri-a [] x = refl
up-+++-distri-a (x‚ÇÅ ‚à∑a xs) x rewrite up-+++-distri-a xs x = refl
up-+++-distri-a (x‚ÇÅ ‚à∑l xs) x rewrite up-+++-distri-a xs x = refl

up-+++-distri-l : ‚àÄ xs l
  ‚Üí up 0 (xs +++ ‚ü¶ l ‚üßl) ‚â° (up 0 xs) +++ (up 0 ‚ü¶ l ‚üßl)
up-+++-distri-l [] x = refl
up-+++-distri-l (x‚ÇÅ ‚à∑a xs) x rewrite up-+++-distri-l xs x = refl
up-+++-distri-l (x‚ÇÅ ‚à∑l xs) x rewrite up-+++-distri-l xs x = refl

rw-apps-l : ‚àÄ es e x
  ‚Üí e ‚ñª (es +++ ‚ü¶ x ‚üßl) ‚â° (e ‚ñª es) ùï° x
rw-apps-l es e x = rw-apps-gen es {e = e} {es' = ‚ü¶ x ‚üßl}

-- main proof
¬¨<0‚Üínil : ‚àÄ {es}
  ‚Üí ¬¨ 1 ‚â§ size-apps es
  ‚Üí es ‚â° []
¬¨<0‚Üínil {[]} sz = refl
¬¨<0‚Üínil {x ‚à∑a es} sz = ‚ä•-elim (sz (s‚â§s z‚â§n))
¬¨<0‚Üínil {x ‚à∑l es} sz = ‚ä•-elim (sz (s‚â§s z‚â§n))

subst-case-0 : ‚àÄ {Œì A B es i e e‚ÇÅ}
  ‚Üí ¬¨ 1 ‚â§ size-apps es
  ‚Üí Œì , A ‚ä¢ i # e ‚ñª up 0 es ‚¶Ç B
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢ i # ((∆õ e) ¬∑ e‚ÇÅ) ‚ñª es ‚¶Ç B
subst-case-0 {es = es} sz ‚ä¢1 ‚ä¢2 rewrite ¬¨<0‚Üínil {es = es} sz = ‚ä¢app‚áí (‚ä¢lam‚ÇÇ ‚ä¢1) ‚ä¢2  

subst-3 : ‚àÄ k‚ÇÅ k‚ÇÇ k‚ÇÉ es {Œì A B e e‚ÇÅ i}
  ‚Üí size-apps es < k‚ÇÅ
  ‚Üí size-counter i < k‚ÇÇ
  ‚Üí size-type B < k‚ÇÉ
  ‚Üí Œì , A ‚ä¢ i # e ‚ñª up 0 es ‚¶Ç B
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢ i # ((∆õ e) ¬∑ e‚ÇÅ) ‚ñª es ‚¶Ç B
  
subst-3-app : ‚àÄ k‚ÇÅ k‚ÇÇ k‚ÇÉ xs x {Œì A B e e‚ÇÅ i}
  ‚Üí (1 + size-apps xs) < k‚ÇÅ
  ‚Üí size-counter i < k‚ÇÇ
  ‚Üí size-type B < k‚ÇÉ
  ‚Üí Œì , A ‚ä¢ i # (e ‚ñª (xs ‚áà)) ¬∑ (x ‚Üë 0) ‚¶Ç B
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢ i #  (((∆õ e) ¬∑ e‚ÇÅ) ‚ñª xs) ¬∑ x ‚¶Ç B

subst-3-prj : ‚àÄ k‚ÇÅ k‚ÇÇ k‚ÇÉ xs l {Œì A B e e‚ÇÅ i}
  ‚Üí (1 + size-apps xs) < k‚ÇÅ
  ‚Üí size-counter i < k‚ÇÇ
  ‚Üí size-type B < k‚ÇÉ
  ‚Üí Œì , A ‚ä¢ i # (e ‚ñª (xs ‚áà)) ùï° l ‚¶Ç B
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢ i #  (((∆õ e) ¬∑ e‚ÇÅ) ‚ñª xs) ùï° l ‚¶Ç B

subst-3 (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) es sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2 with size-apps es >? 0
subst-3 (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) es {e = e} {e‚ÇÅ = e‚ÇÅ} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2 | yes p with apps-destruct es p
... | des-app x xs eq rewrite eq
                            | rw-apps-a xs ((∆õ e) ¬∑ e‚ÇÅ) x
                            | up-+++-distri-a xs x
                            | rw-apps-a (up 0 xs) e (x ‚Üë 0)
  = subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x (size-apps-+++a x xs k‚ÇÅ sz‚ÇÅ) sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2
... | des-prj l xs eq rewrite eq
                            | rw-apps-l xs ((∆õ e) ¬∑ e‚ÇÅ) l
                            | up-+++-distri-l xs l
                            | rw-apps-l (up 0 xs) e l
  = subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l (size-apps-+++l l xs k‚ÇÅ sz‚ÇÅ) sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2
subst-3 (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) es sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2 | no ¬¨p = subst-case-0 {es = es} ¬¨p ‚ä¢1 ‚ä¢2

subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢app‚áê {A = A} {B = B} ‚ä¢1 ‚ä¢3) ‚ä¢2 =
  let ind-e‚ÇÅ = subst-3 k‚ÇÅ (suc (suc k‚ÇÇ)) (suc (suc (size-type A) + (size-type B))) xs (‚â§-pred sz‚ÇÅ) (s‚â§s sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2
  in (‚ä¢app‚áê ind-e‚ÇÅ (‚ä¢d-strengthen-0 ‚ä¢3))
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢app‚áí {A = A} {B = B} ‚ä¢1 ‚ä¢3) ‚ä¢2 =
  let ind-e‚ÇÅ = subst-3 k‚ÇÅ (suc (suc k‚ÇÇ)) (suc (suc (size-type A) + (size-type B))) xs (‚â§-pred sz‚ÇÅ) (s‚â§s sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2
  in ‚ä¢app‚áí ind-e‚ÇÅ (‚ä¢d-strengthen-0 ‚ä¢3)
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ Z} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 = ‚ä•-elim (j‚â¢Z refl)
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ ‚àû} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
  ‚ä¢sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (<-pred sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ (S‚áê j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
  ‚ä¢sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ (Sl j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
 ‚ä¢sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = S‚áí i} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
  ‚ä¢sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (size-counter>0 {i = i} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B

subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ Z} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 = ‚ä•-elim (i‚â¢Z refl)
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ ‚àû} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
  ‚ä¢sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (<-pred sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ (S‚áê j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
 ‚ä¢sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ (Sl j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
 ‚ä¢sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = S‚áí i} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
  ‚ä¢sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (size-counter>0 {i = i} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢prj {l = l} {A = A} ‚ä¢1) ‚ä¢2 =
  let ind-e‚ÇÅ = subst-3 k‚ÇÅ (suc (suc k‚ÇÇ)) (suc (suc (size-type A))) xs (‚â§-pred sz‚ÇÅ) (s‚â§s sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2
  in (‚ä¢prj ind-e‚ÇÅ)

subst :  ‚àÄ {Œì A B e e‚ÇÅ i} (es : Apps)
  ‚Üí Œì , A ‚ä¢ i # e ‚ñª up 0 es ‚¶Ç B
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢ i # ((∆õ e) ¬∑ e‚ÇÅ) ‚ñª es ‚¶Ç B
subst {B = B} {i = i} es ‚ä¢1 ‚ä¢2 =
  subst-3 (suc (size-apps es)) (suc (size-counter i)) (suc (size-type B)) es (s‚â§s m‚â§m) (s‚â§s m‚â§m) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2

----------------------------------------------------------------------
--+                                                                +--
--+                           Soundness                            +--
--+                                                                +--
----------------------------------------------------------------------

‚Öâ : Apps ‚Üí CCounter
‚Öâ [] = Z
‚Öâ (_ ‚à∑a as) = S‚áê (‚Öâ as)
‚Öâ (_ ‚à∑l as) = Sl (‚Öâ as)

‚Öâ' : Apps ‚Üí CCounter
‚Öâ' [] = ‚àû
‚Öâ' (_ ‚à∑a as) = S‚áê (‚Öâ' as)
‚Öâ' (_ ‚à∑l as) = Sl (‚Öâ' as)

Œ£‚â¢‚ñ°‚Üíj‚â¢Z : ‚àÄ {Œ£ A' es As A''}
  ‚Üí Œ£ ‚â¢ ‚ñ°
  ‚Üí ‚ü¶ Œ£ , A' ‚üß‚Üí‚ü¶ es , ‚ñ° , As , A'' ‚üß
  ‚Üí ‚ô≠ (‚Öâ es) ‚â¢ ‚ô≠ Z
Œ£‚â¢‚ñ°‚Üíj‚â¢Z {Œ£ = ‚ñ°} Œ£‚â¢‚ñ° spl = ‚ä•-elim (Œ£‚â¢‚ñ° refl)
Œ£‚â¢‚ñ°‚Üíj‚â¢Z {Œ£ = ‚ü¶ x ‚üß‚áí Œ£} Œ£‚â¢‚ñ° (have-a spl) = Œª ()
Œ£‚â¢‚ñ°‚Üíj‚â¢Z {Œ£ = ‚åä x ‚åã‚áí Œ£} Œ£‚â¢‚ñ° (have-l spl) = Œª ()

Œ£‚â¢‚ñ°‚Üíj‚â¢Z' : ‚àÄ {Œ£ A' es As A'' T}
  ‚Üí Œ£ ‚â¢ ‚ñ°
  ‚Üí ‚ü¶ Œ£ , A' ‚üß‚Üí‚ü¶ es , œÑ T , As , A'' ‚üß
  ‚Üí ‚ô≠ (‚Öâ' es) ‚â¢ ‚ô≠ Z
Œ£‚â¢‚ñ°‚Üíj‚â¢Z' {Œ£ = œÑ x} Œ£‚â¢‚ñ° none-œÑ = Œª ()
Œ£‚â¢‚ñ°‚Üíj‚â¢Z' {Œ£ = ‚ü¶ x ‚üß‚áí Œ£} Œ£‚â¢‚ñ° (have-a spl) = Œª ()
Œ£‚â¢‚ñ°‚Üíj‚â¢Z' {Œ£ = ‚åä x ‚åã‚áí Œ£} Œ£‚â¢‚ñ° (have-l spl) = Œª ()

app-elim : ‚àÄ {Œì e as Œ£ A A' As}
  ‚Üí Œì ‚ä¢ ‚ô≠ (‚Öâ as) # e ‚¶Ç A
  ‚Üí ‚ü¶ Œ£ , A ‚üß‚Üí‚ü¶ as , ‚ñ° , As , A' ‚üß
  ‚Üí Œì ‚ä© as ‚áö As
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e ‚ñª as ‚¶Ç A'
app-elim ‚ä¢e none-‚ñ° ‚ä©none‚áö = ‚ä¢e
app-elim ‚ä¢e (have-a spl) (‚ä©cons‚áö ‚ä¢s x) = app-elim (‚ä¢app‚áê ‚ä¢e x) spl ‚ä¢s
app-elim ‚ä¢e (have-l spl) (‚ä©consl ‚ä¢s) = app-elim (‚ä¢prj ‚ä¢e) spl ‚ä¢s

app-elim' : ‚àÄ {Œì e as Œ£ A A' As T}
  ‚Üí Œì ‚ä¢ ‚ô≠ (‚Öâ' as) # e ‚¶Ç A
  ‚Üí ‚ü¶ Œ£ , A ‚üß‚Üí‚ü¶ as , œÑ T , As , A' ‚üß
  ‚Üí Œì ‚ä© as ‚áö As
  ‚Üí Œì ‚ä¢ ‚ô≠ ‚àû # e ‚ñª as ‚¶Ç A'
app-elim' ‚ä¢e none-œÑ ‚ä©none‚áö = ‚ä¢e
app-elim' ‚ä¢e (have-a spl) (‚ä©cons‚áö ‚ä¢s x) = app-elim' (‚ä¢app‚áê ‚ä¢e x) spl ‚ä¢s
app-elim' ‚ä¢e (have-l spl) (‚ä©consl ‚ä¢s) = app-elim' (‚ä¢prj ‚ä¢e) spl ‚ä¢s
  
sound-inf : ‚àÄ {Œì e Œ£ A es As A'}
  ‚Üí Œì ‚ä¢ Œ£ ‚áí e ‚áí A
  ‚Üí ‚ü¶ Œ£ , A ‚üß‚Üí‚ü¶ es , ‚ñ° , As , A' ‚üß
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e ‚ñª es ‚¶Ç A'

sound-chk : ‚àÄ {Œì e Œ£ A es T As A'}
  ‚Üí Œì ‚ä¢ Œ£ ‚áí e ‚áí A
  ‚Üí ‚ü¶ Œ£ , A ‚üß‚Üí‚ü¶ es , œÑ T , As , A' ‚üß
  ‚Üí Œì ‚ä¢ ‚ô≠ ‚àû # e ‚ñª es ‚¶Ç T

sound-‚â§ : ‚àÄ {Œì A Œ£ A' A'' es As}
  ‚Üí Œì ‚ä¢ A ‚â§ Œ£ ‚áù A'
  ‚Üí ‚ü¶ Œ£ , A' ‚üß‚Üí‚ü¶ es , ‚ñ° , As , A'' ‚üß
  ‚Üí  A ‚â§ ‚ô≠ (‚Öâ es) # A'

sound-‚â§chk : ‚àÄ {Œì A Œ£ A' A'' es As T}
  ‚Üí Œì ‚ä¢ A ‚â§ Œ£ ‚áù A'
  ‚Üí ‚ü¶ Œ£ , A' ‚üß‚Üí‚ü¶ es , œÑ T , As , A'' ‚üß
  ‚Üí  A ‚â§ ‚ô≠ (‚Öâ' es) # A'

sound-es : ‚àÄ {Œì A‚ÇÅ Œ£ A As A' es Œ£'}
  ‚Üí Œì ‚ä¢ A‚ÇÅ ‚â§ Œ£ ‚áù A
  ‚Üí ‚ü¶ Œ£ , A ‚üß‚Üí‚ü¶ es , Œ£' , As , A' ‚üß
  ‚Üí Œì ‚ä© es ‚áö As

-- two corollaries
sound-inf-0 : ‚àÄ {Œì e A}
  ‚Üí Œì ‚ä¢ ‚ñ° ‚áí e ‚áí A
  ‚Üí Œì ‚ä¢ ‚ô≠ Z # e ‚¶Ç A
sound-inf-0 ‚ä¢e = sound-inf ‚ä¢e none-‚ñ°

sound-chk-0 : ‚àÄ {Œì e A B}
  ‚Üí Œì ‚ä¢ œÑ A ‚áí e ‚áí B
  ‚Üí Œì ‚ä¢ ‚ô≠ ‚àû # e ‚¶Ç A
sound-chk-0 ‚ä¢e = sound-chk ‚ä¢e none-œÑ

sound-r : ‚àÄ {Œì rs A}
  ‚Üí Œì ‚ä¢r ‚ñ° ‚áí rs ‚áí A
  ‚Üí Œì ‚ä¢r ‚ô≠ Z # rs ‚¶Ç A
sound-r ‚ä¢nil = ‚ä¢r-nil
sound-r (‚ä¢one x) = ‚ä¢r-one (sound-inf-0 x)
sound-r (‚ä¢cons x ‚ä¢rs neq) = ‚ä¢r-cons (sound-inf-0 x) (sound-r ‚ä¢rs) neq

sound-inf ‚ä¢c none-‚ñ° = ‚ä¢c
sound-inf (‚ä¢var x) none-‚ñ° = ‚ä¢var x
sound-inf (‚ä¢ann ‚ä¢e) none-‚ñ° = ‚ä¢ann (sound-chk-0 ‚ä¢e)
sound-inf (‚ä¢app ‚ä¢e) spl = sound-inf ‚ä¢e (have-a spl)
sound-inf {es = e ‚à∑a es} (‚ä¢lam‚ÇÇ ‚ä¢e ‚ä¢e‚ÇÅ) (have-a spl) = subst es (sound-inf ‚ä¢e‚ÇÅ (spl-weaken spl)) (sound-inf-0 ‚ä¢e)
sound-inf (‚ä¢sub x ‚ä¢e x‚ÇÅ Œ£‚â¢‚ñ°) spl = app-elim (‚ä¢sub' (sound-inf-0 ‚ä¢e) (sound-‚â§ x‚ÇÅ spl)) spl (sound-es x‚ÇÅ spl)
sound-inf (‚ä¢rcd x) none-‚ñ° = ‚ä¢rcd (sound-r x)
sound-inf (‚ä¢prj ‚ä¢e) spl = sound-inf ‚ä¢e (have-l spl)

sound-chk (‚ä¢app ‚ä¢e) spl = sound-chk ‚ä¢e (have-a spl)
sound-chk (‚ä¢lam‚ÇÅ ‚ä¢e) none-œÑ = ‚ä¢lam‚ÇÅ (sound-chk ‚ä¢e none-œÑ)
sound-chk {es = e ‚à∑a es} (‚ä¢lam‚ÇÇ ‚ä¢e ‚ä¢e‚ÇÅ) (have-a spl) = subst es (sound-chk ‚ä¢e‚ÇÅ (spl-weaken spl)) (sound-inf-0 ‚ä¢e)
sound-chk ‚ä¢e'@(‚ä¢sub pv-e ‚ä¢e A‚â§Œ£ Œ£‚â¢‚ñ°) spl rewrite ‚ä¢spl-œÑ ‚ä¢e' spl = app-elim' (‚ä¢sub' (sound-inf-0 ‚ä¢e) (sound-‚â§chk A‚â§Œ£ spl)) spl (sound-es A‚â§Œ£ spl)
sound-chk (‚ä¢prj ‚ä¢e) spl = sound-chk ‚ä¢e (have-l spl)

sound-‚â§ ‚â§‚ñ° none-‚ñ° = ‚â§Z
sound-‚â§ (‚â§hint x A‚â§Œ£) (have-a spl) = ‚â§arr-S‚áê ‚â§refl‚àû (sound-‚â§ A‚â§Œ£ spl)
sound-‚â§ (‚â§hint-l A‚â§Œ£) (have-l spl) = ‚â§rcd-Sl (sound-‚â§ A‚â§Œ£ spl)
sound-‚â§ (‚â§and-l A‚â§Œ£ x) spl = ‚â§and‚ÇÅ (sound-‚â§ A‚â§Œ£ spl) (Œ£‚â¢‚ñ°‚Üíj‚â¢Z x spl)
sound-‚â§ (‚â§and-r A‚â§Œ£ x) spl = ‚â§and‚ÇÇ (sound-‚â§ A‚â§Œ£ spl) (Œ£‚â¢‚ñ°‚Üíj‚â¢Z x spl)

sound-‚â§chk ‚â§int none-œÑ = ‚â§int‚àû
sound-‚â§chk ‚â§float none-œÑ = ‚â§float‚àû
sound-‚â§chk ‚â§top none-œÑ = ‚â§top
sound-‚â§chk (‚â§arr A‚â§Œ£ A‚â§Œ£‚ÇÅ) none-œÑ rewrite sym (‚â§id-0 A‚â§Œ£) | sym (‚â§id-0 A‚â§Œ£‚ÇÅ) = ‚â§arr-‚àû (sound-‚â§chk A‚â§Œ£ none-œÑ) (sound-‚â§chk A‚â§Œ£‚ÇÅ none-œÑ)
sound-‚â§chk (‚â§rcd A‚â§Œ£) none-œÑ = ‚â§rcd‚àû (sound-‚â§chk A‚â§Œ£ none-œÑ)
sound-‚â§chk (‚â§hint x A‚â§Œ£) (have-a spl) = ‚â§arr-S‚áê ‚â§refl‚àû (sound-‚â§chk A‚â§Œ£ spl)
sound-‚â§chk (‚â§hint-l A‚â§Œ£) (have-l spl) = ‚â§rcd-Sl (sound-‚â§chk A‚â§Œ£ spl)
sound-‚â§chk (‚â§and-l A‚â§Œ£ x) spl = ‚â§and‚ÇÅ (sound-‚â§chk A‚â§Œ£ spl) (Œ£‚â¢‚ñ°‚Üíj‚â¢Z' x spl)
sound-‚â§chk (‚â§and-r A‚â§Œ£ x) spl = ‚â§and‚ÇÇ (sound-‚â§chk A‚â§Œ£ spl) (Œ£‚â¢‚ñ°‚Üíj‚â¢Z' x spl)
sound-‚â§chk (‚â§and A‚â§Œ£ A‚â§Œ£‚ÇÅ) none-œÑ = ‚â§and (sound-‚â§chk A‚â§Œ£ none-œÑ) (sound-‚â§chk A‚â§Œ£‚ÇÅ none-œÑ)

sound-es ‚â§int none-œÑ = ‚ä©none‚áö
sound-es ‚â§float none-œÑ = ‚ä©none‚áö
sound-es ‚â§top none-œÑ = ‚ä©none‚áö
sound-es ‚â§‚ñ° none-‚ñ° = ‚ä©none‚áö
sound-es (‚â§arr A‚â§Œ£ A‚â§Œ£‚ÇÅ) none-œÑ = ‚ä©none‚áö
sound-es (‚â§rcd A‚â§Œ£) none-œÑ = ‚ä©none‚áö
sound-es (‚â§hint x A‚â§Œ£) (have-a spl) = ‚ä©cons‚áö (sound-es A‚â§Œ£ spl) (sound-chk-0 x)
sound-es (‚â§hint-l A‚â§Œ£) (have-l spl) = ‚ä©consl (sound-es A‚â§Œ£ spl)
sound-es (‚â§and-l A‚â§Œ£ x) spl = sound-es A‚â§Œ£ spl
sound-es (‚â§and-r A‚â§Œ£ x) spl = sound-es A‚â§Œ£ spl
sound-es (‚â§and A‚â§Œ£ A‚â§Œ£‚ÇÅ) none-œÑ = ‚ä©none‚áö
