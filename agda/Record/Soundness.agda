module Record.Soundness where

open import Record.Prelude
open import Record.Common
open import Record.Decl
open import Record.Decl.Properties
open import Record.Algo
open import Record.Algo.Properties

infix 5 _‚áà
_‚áà : Apps ‚Üí Apps
_‚áà = up 0


infix 4 _‚ä©_‚áö_
data _‚ä©_‚áö_ : Context ‚Üí Apps ‚Üí AppsType ‚Üí Set where
  ‚ä©none‚áö : ‚àÄ {Œì}
    ‚Üí Œì ‚ä© [] ‚áö []

  ‚ä©cons‚áö : ‚àÄ {Œì es As e A}
    ‚Üí Œì ‚ä© es ‚áö As
    ‚Üí Œì ‚ä¢d ‚ô≠ ‚àû # e ‚¶Ç A
    ‚Üí Œì ‚ä© (e ‚à∑a es) ‚áö (A ‚à∑a As)

  ‚ä©consl : ‚àÄ {Œì es As l}
    ‚Üí Œì ‚ä© es ‚áö As
    ‚Üí Œì ‚ä© (l ‚à∑l es) ‚áö (l ‚à∑l As)


-- after adding restrictin to s-and‚ÇÅ and s-and‚ÇÇ, we can have a nice inversion lemma
‚â§d-z-inv : ‚àÄ {A A'}
  ‚Üí A ‚â§d ‚ô≠ Z # A'
  ‚Üí A ‚â° A'
‚â§d-z-inv ‚â§d-Z = refl
‚â§d-z-inv (‚â§d-and‚ÇÅ A‚â§A' x) = ‚ä•-elim (x refl)
‚â§d-z-inv (‚â§d-and‚ÇÇ A‚â§A' x) = ‚ä•-elim (x refl)

----------------------------------------------------------------------
--+                                                                +--
--+                             Subst                              +--
--+                                                                +--
----------------------------------------------------------------------

size-apps : Apps ‚Üí ‚Ñï
size-apps [] = 0
size-apps (_ ‚à∑a as) = 1 + size-apps as
size-apps (_ ‚à∑l as) = 1 + size-apps as

size-ccounter : CCounter ‚Üí ‚Ñï
size-ccounter Z = 0
size-ccounter ‚àû = 1
size-ccounter (S‚áê j) = 1 + size-ccounter j
size-ccounter (Sl j) = 1 + size-ccounter j

size-counter : Counter ‚Üí ‚Ñï
size-counter (‚ô≠ j) = size-ccounter j
size-counter (S‚áí i) = 1 + size-counter i

size-type : Type ‚Üí ‚Ñï
size-type Int = 0
size-type (* x) = 0
size-type Top = 0
size-type (A ‚áí B) = 1 + size-type A + size-type B
size-type (A & B) = 1 + size-type A + size-type B
size-type œÑ‚ü¶ l ‚Ü¶ A ‚üß = 1 + size-type A

size-ccounter>0 : ‚àÄ {k j}
  ‚Üí size-ccounter j < k
  ‚Üí 0 < k
size-ccounter>0 {k = k} {j = Z} sz = sz
size-ccounter>0 {k = k} {j = ‚àû} sz = <-trans (s‚â§s z‚â§n) sz
size-ccounter>0 {k = suc k} {j = S‚áê j} sz = s‚â§s z‚â§n
size-ccounter>0 {k = suc k} {j = Sl j} sz = s‚â§s z‚â§n

size-counter>0 : ‚àÄ {k i}
  ‚Üí size-counter i < k
  ‚Üí 0 < k
size-counter>0 {suc i} {k} sz = s‚â§s z‚â§n

size-type-+-l : ‚àÄ {A B k}
  ‚Üí size-type A + size-type B < k
  ‚Üí size-type A < k
size-type-+-l sz = m+n<o‚áím<o sz

size-type-+-r : ‚àÄ {A B k}
  ‚Üí size-type A + size-type B < k
  ‚Üí size-type B < k
size-type-+-r sz = m+n<o‚áín<o sz

-- a bunch of rewriting lemmas
_+++_ : Apps ‚Üí Apps ‚Üí Apps
[] +++ as‚ÇÇ = as‚ÇÇ
(e ‚à∑a as‚ÇÅ) +++ as‚ÇÇ = e ‚à∑a (as‚ÇÅ +++ as‚ÇÇ)
(l ‚à∑l as‚ÇÅ) +++ as‚ÇÇ = l ‚à∑l (as‚ÇÅ +++ as‚ÇÇ)

apps-consa>0 : ‚àÄ {e as}
  ‚Üí size-apps (e ‚à∑a as) > 0
apps-consa>0 = s‚â§s z‚â§n

apps-consl>0 : ‚àÄ {l as}
  ‚Üí size-apps (l ‚à∑l as) > 0
apps-consl>0 = s‚â§s z‚â§n  

data AppsDes (as : Apps) : Set where

  des-app : ‚àÄ x xs
    ‚Üí as ‚â° xs +++ (x ‚à∑a [])
    ‚Üí AppsDes as

  des-prj : ‚àÄ l xs
    ‚Üí as ‚â° xs +++ (l ‚à∑l [])
    ‚Üí AppsDes as  

apps-destruct : ‚àÄ as
  ‚Üí 0 < size-apps as
  ‚Üí AppsDes as
apps-destruct (x ‚à∑a []) (s‚â§s sz) = des-app x [] refl
apps-destruct (x ‚à∑a (y ‚à∑a as)) (s‚â§s sz) with apps-destruct (y ‚à∑a as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑a xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑a xs) refl
apps-destruct (x ‚à∑a (y ‚à∑l as)) (s‚â§s sz) with apps-destruct (y ‚à∑l as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑a xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑a xs) refl
apps-destruct (x ‚à∑l []) sz = des-prj x [] refl
apps-destruct (x ‚à∑l (y ‚à∑a as)) (s‚â§s sz) with apps-destruct (y ‚à∑a as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑l xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑l xs) refl
apps-destruct (x ‚à∑l (y ‚à∑l as)) (s‚â§s sz) with apps-destruct (y ‚à∑l as) (s‚â§s z‚â§n)
... | des-app x' xs eq rewrite eq = des-app x' (x ‚à∑l xs) refl
... | des-prj l xs eq rewrite eq = des-prj l (x ‚à∑l xs) refl

pattern ‚ü¶_‚üßa z = z ‚à∑a []
pattern ‚ü¶_‚üßl z = z ‚à∑l []

-- tinker with size

cons-+++-size : ‚àÄ {e es xs x}
  ‚Üí (e ‚à∑a es) ‚â° (xs +++ ‚ü¶ x ‚üßa)
  ‚Üí size-apps es ‚â° size-apps xs
cons-+++-size = {!!}

size-apps-+++a : ‚àÄ {e es x xs k}
  ‚Üí suc (suc (size-apps es)) ‚â§ suc k
  ‚Üí (e ‚à∑a es) ‚â° (xs +++ ‚ü¶ x ‚üßa)
  ‚Üí suc (size-apps xs) < suc k
size-apps-+++a = {!!}  

size-apps-+++l : ‚àÄ {e es x xs k}
  ‚Üí suc (suc (size-apps es)) ‚â§ suc k
  ‚Üí (e ‚à∑l es) ‚â° (xs +++ ‚ü¶ x ‚üßl)
  ‚Üí suc (size-apps xs) < suc k
size-apps-+++l = {!!}  

rw-+++-app : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ es j B xs x}
  ‚Üí Œì ‚ä¢d j # e‚ÇÅ ‚ñª (xs +++ ‚ü¶ x ‚üßa) ‚¶Ç B
  ‚Üí (e‚ÇÇ ‚à∑a es) ‚â° (xs +++ ‚ü¶ x ‚üßa)
  ‚Üí Œì ‚ä¢d j # (e‚ÇÅ ¬∑ e‚ÇÇ) ‚ñª es ‚¶Ç B
rw-+++-app ‚ä¢e eq rewrite (sym eq) = ‚ä¢e

rw-+++-app' : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ es j B xs x}
  ‚Üí Œì ‚ä¢d j # (e‚ÇÅ ¬∑ e‚ÇÇ) ‚ñª es ‚¶Ç B
  ‚Üí (e‚ÇÇ ‚à∑a es) ‚â° (xs +++ ‚ü¶ x ‚üßa)
  ‚Üí Œì ‚ä¢d j # e‚ÇÅ ‚ñª (xs +++ ‚ü¶ x ‚üßa) ‚¶Ç B
rw-+++-app' ‚ä¢e eq rewrite (sym eq) = ‚ä¢e

rw-+++-prj : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ es j B xs x}
  ‚Üí Œì ‚ä¢d j # e‚ÇÅ ‚ñª (xs +++ ‚ü¶ x ‚üßl) ‚¶Ç B
  ‚Üí (e‚ÇÇ ‚à∑l es) ‚â° (xs +++ ‚ü¶ x ‚üßl)
  ‚Üí Œì ‚ä¢d j # (e‚ÇÅ ùï° e‚ÇÇ) ‚ñª es ‚¶Ç B
rw-+++-prj ‚ä¢e eq rewrite (sym eq) = ‚ä¢e

rw-+++-prj' : ‚àÄ {Œì e‚ÇÅ e‚ÇÇ es j B xs x}
  ‚Üí Œì ‚ä¢d j # (e‚ÇÅ ùï° e‚ÇÇ) ‚ñª es ‚¶Ç B
  ‚Üí (e‚ÇÇ ‚à∑l es) ‚â° (xs +++ ‚ü¶ x ‚üßl)
  ‚Üí Œì ‚ä¢d j # e‚ÇÅ ‚ñª (xs +++ ‚ü¶ x ‚üßl) ‚¶Ç B
rw-+++-prj' ‚ä¢e eq rewrite (sym eq) = ‚ä¢e

rw-apps-gen : ‚àÄ (es) {e es'}
  ‚Üí e ‚ñª (es +++ es') ‚â° (e ‚ñª es) ‚ñª es'
rw-apps-gen [] = refl
rw-apps-gen (x ‚à∑a es) = rw-apps-gen es
rw-apps-gen (x ‚à∑l es) = rw-apps-gen es

rw-apps-a : ‚àÄ {es e x}
  ‚Üí e ‚ñª (es +++ ‚ü¶ x ‚üßa) ‚â° (e ‚ñª es) ¬∑ x
rw-apps-a {es} {e} {x} = rw-apps-gen es {e = e} {es' = ‚ü¶ x ‚üßa}

rw-apps-l : ‚àÄ {es e x}
  ‚Üí e ‚ñª (es +++ ‚ü¶ x ‚üßl) ‚â° (e ‚ñª es) ùï° x
rw-apps-l {es} {e} {x} = rw-apps-gen es {e = e} {es' = ‚ü¶ x ‚üßl}

rw-‚ä¢apps-a : ‚àÄ {Œì j es e x A}
  ‚Üí Œì ‚ä¢d j # e ‚ñª (es +++ ‚ü¶ x ‚üßa) ‚¶Ç A
  ‚Üí Œì ‚ä¢d j # (e ‚ñª es) ¬∑ x ‚¶Ç A
rw-‚ä¢apps-a {es = es} {e = e} {x = x} ‚ä¢e rewrite rw-apps-a {es} {e} {x} = ‚ä¢e

rw-‚ä¢apps-a' : ‚àÄ {Œì j es e x A}
  ‚Üí Œì ‚ä¢d j # (e ‚ñª es) ¬∑ x ‚¶Ç A
  ‚Üí Œì ‚ä¢d j # e ‚ñª (es +++ ‚ü¶ x ‚üßa) ‚¶Ç A
rw-‚ä¢apps-a' {es = es} {e = e} {x = x} ‚ä¢e rewrite rw-apps-a {es} {e} {x} = ‚ä¢e

rw-‚ä¢apps-l : ‚àÄ {Œì j es e x A}
  ‚Üí Œì ‚ä¢d j # e ‚ñª (es +++ ‚ü¶ x ‚üßl) ‚¶Ç A
  ‚Üí Œì ‚ä¢d j # (e ‚ñª es) ùï° x ‚¶Ç A
rw-‚ä¢apps-l {es = es} {e = e} {x = x} ‚ä¢e rewrite rw-apps-l {es} {e} {x} = ‚ä¢e

rw-‚ä¢apps-l' : ‚àÄ {Œì j es e x A}
  ‚Üí Œì ‚ä¢d j # (e ‚ñª es) ùï° x ‚¶Ç A
  ‚Üí Œì ‚ä¢d j # e ‚ñª (es +++ ‚ü¶ x ‚üßl) ‚¶Ç A
rw-‚ä¢apps-l' {es = es} {e = e} {x = x} ‚ä¢e rewrite rw-apps-l {es} {e} {x} = ‚ä¢e

eq-consa-‚Üë : ‚àÄ {e es xs x}
  ‚Üí e ‚à∑a es ‚â° xs +++ ‚ü¶ x ‚üßa
  ‚Üí (e ‚Üë 0) ‚à∑a up 0 es ‚â° (up 0 xs) +++ ‚ü¶ x ‚Üë 0 ‚üßa
eq-consa-‚Üë {xs = xs} {x = x} eq = {!!}

-- main proof
subst-3 : ‚àÄ k‚ÇÅ k‚ÇÇ k‚ÇÉ es {Œì A B e e‚ÇÅ i}
  ‚Üí size-apps es < k‚ÇÅ
  ‚Üí size-counter i < k‚ÇÇ
  ‚Üí size-type B < k‚ÇÉ
  ‚Üí Œì , A ‚ä¢d i # e ‚ñª up 0 es ‚¶Ç B
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢d i # ((∆õ e) ¬∑ e‚ÇÅ) ‚ñª es ‚¶Ç B
  
subst-3-app : ‚àÄ k‚ÇÅ k‚ÇÇ k‚ÇÉ xs x {Œì A B e e‚ÇÅ i}
  ‚Üí (1 + size-apps xs) < k‚ÇÅ
  ‚Üí size-counter i < k‚ÇÇ
  ‚Üí size-type B < k‚ÇÉ
  ‚Üí Œì , A ‚ä¢d i # (e ‚ñª (xs ‚áà)) ¬∑ (x ‚Üë 0) ‚¶Ç B
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢d i #  (((∆õ e) ¬∑ e‚ÇÅ) ‚ñª xs) ¬∑ x ‚¶Ç B

subst-3-prj : ‚àÄ k‚ÇÅ k‚ÇÇ k‚ÇÉ xs l {Œì A B e e‚ÇÅ i}
  ‚Üí (1 + size-apps xs) < k‚ÇÅ
  ‚Üí size-counter i < k‚ÇÇ
  ‚Üí size-type B < k‚ÇÉ
  ‚Üí Œì , A ‚ä¢d i # (e ‚ñª (xs ‚áà)) ùï° l ‚¶Ç B
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢d i #  (((∆õ e) ¬∑ e‚ÇÅ) ‚ñª xs) ùï° l ‚¶Ç B

subst-3 (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) [] sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2 = ‚ä¢d-app‚áí (‚ä¢d-lam‚ÇÇ ‚ä¢1) ‚ä¢2
subst-3 (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) (e ‚à∑a es) {i = i} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2 with (Œª x xs eq ‚Üí
  rw-+++-app (rw-‚ä¢apps-a' {es = xs} (subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x
                                                 (size-apps-+++a sz‚ÇÅ eq) sz‚ÇÇ sz‚ÇÉ
                                                   (rw-‚ä¢apps-a {es = xs ‚áà} (rw-+++-app' ‚ä¢1 (eq-consa-‚Üë eq))) ‚ä¢2)) eq)
                                                   | apps-destruct (e ‚à∑a es) (apps-consa>0 {e} {es})
... | rec | des-app x xs eq = rec x xs eq                                                       
... | rec | des-prj l xs eq = {!!}
subst-3 (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) (l ‚à∑l es) sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ ‚ä¢1 ‚ä¢2 with apps-destruct (l ‚à∑l es) (apps-consl>0 {l} {es})
... | des-app x xs eq = {!!}
... | des-prj l' xs eq = {!!}

subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-app‚áê {A = A} {B = B} ‚ä¢1 ‚ä¢3) ‚ä¢2 =
  let ind-e‚ÇÅ = subst-3 k‚ÇÅ (suc (suc k‚ÇÇ)) (suc (suc (size-type A) + (size-type B))) xs (‚â§-pred sz‚ÇÅ) (s‚â§s sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2
  in (‚ä¢d-app‚áê ind-e‚ÇÅ (‚ä¢d-strengthen-0 ‚ä¢3))
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-app‚áí {A = A} {B = B} ‚ä¢1 ‚ä¢3) ‚ä¢2 =
  let ind-e‚ÇÅ = subst-3 k‚ÇÅ (suc (suc k‚ÇÇ)) (suc (suc (size-type A) + (size-type B))) xs (‚â§-pred sz‚ÇÅ) (s‚â§s sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2
  in ‚ä¢d-app‚áí ind-e‚ÇÅ (‚ä¢d-strengthen-0 ‚ä¢3)
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ Z} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 = ‚ä•-elim (j‚â¢Z refl)
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ ‚àû} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
  ‚ä¢d-sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (<-pred sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ (S‚áê j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
  ‚ä¢d-sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = ‚ô≠ (Sl j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
 ‚ä¢d-sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x {i = S‚áí i} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B j‚â¢Z) ‚ä¢2 =
  ‚ä¢d-sub' (subst-3-app (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs x sz‚ÇÅ (size-counter>0 {i = i} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs x sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-& {A = A} {B = B} ‚ä¢1 ‚ä¢3) ‚ä¢2 =
  ‚ä¢d-& (subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) k‚ÇÉ xs x sz‚ÇÅ sz‚ÇÇ (size-type-+-l {A = A} {B = B} (<-pred sz‚ÇÉ)) ‚ä¢1 ‚ä¢2)
       (subst-3-app (suc k‚ÇÅ) (suc k‚ÇÇ) k‚ÇÉ xs x sz‚ÇÅ sz‚ÇÇ (size-type-+-r {A = A} {B = B} (<-pred sz‚ÇÉ)) ‚ä¢3 ‚ä¢2)

subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ Z} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 = ‚ä•-elim (i‚â¢Z refl)
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ ‚àû} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
  ‚ä¢d-sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (<-pred sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ (S‚áê j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
 ‚ä¢d-sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = ‚ô≠ (Sl j)} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
 ‚ä¢d-sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (size-ccounter>0 {j = j} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l {i = S‚áí i} sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-sub {B = B} ‚ä¢1 A‚â§B i‚â¢Z) ‚ä¢2 =
  ‚ä¢d-sub' (subst-3-prj (suc k‚ÇÅ) k‚ÇÇ (suc (size-type B)) xs l sz‚ÇÅ (size-counter>0 {i = i} (<-pred sz‚ÇÇ)) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2) A‚â§B
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-& {A = A} {B = B} ‚ä¢1 ‚ä¢3) ‚ä¢2 =
  ‚ä¢d-& (subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) k‚ÇÉ xs l sz‚ÇÅ sz‚ÇÇ (size-type-+-l {A = A} {B = B} (<-pred sz‚ÇÉ)) ‚ä¢1 ‚ä¢2)
       (subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) k‚ÇÉ xs l sz‚ÇÅ sz‚ÇÇ (size-type-+-r {A = A} {B = B} (<-pred sz‚ÇÉ)) ‚ä¢3 ‚ä¢2)
subst-3-prj (suc k‚ÇÅ) (suc k‚ÇÇ) (suc k‚ÇÉ) xs l sz‚ÇÅ sz‚ÇÇ sz‚ÇÉ (‚ä¢d-prj {l = l} {A = A} ‚ä¢1) ‚ä¢2 =
  let ind-e‚ÇÅ = subst-3 k‚ÇÅ (suc (suc k‚ÇÇ)) (suc (suc (size-type A))) xs (‚â§-pred sz‚ÇÅ) (s‚â§s sz‚ÇÇ) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2
  in (‚ä¢d-prj ind-e‚ÇÅ)

subst :  ‚àÄ {Œì A B e e‚ÇÅ i} (es : Apps)
  ‚Üí Œì , A ‚ä¢d i # e ‚ñª up 0 es ‚¶Ç B
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e‚ÇÅ ‚¶Ç A
  ‚Üí Œì ‚ä¢d i # ((∆õ e) ¬∑ e‚ÇÅ) ‚ñª es ‚¶Ç B
subst {B = B} {i = i} es ‚ä¢1 ‚ä¢2 =
  subst-3 (suc (size-apps es)) (suc (size-counter i)) (suc (size-type B)) es (s‚â§s m‚â§m) (s‚â§s m‚â§m) (s‚â§s m‚â§m) ‚ä¢1 ‚ä¢2

----------------------------------------------------------------------
--+                                                                +--
--+                           Soundness                            +--
--+                                                                +--
----------------------------------------------------------------------

‚Öâ : Apps ‚Üí CCounter
‚Öâ [] = Z
‚Öâ (_ ‚à∑a as) = S‚áê (‚Öâ as)
‚Öâ (_ ‚à∑l as) = Sl (‚Öâ as)

‚Öâ' : Apps ‚Üí CCounter
‚Öâ' [] = ‚àû
‚Öâ' (_ ‚à∑a as) = S‚áê (‚Öâ' as)
‚Öâ' (_ ‚à∑l as) = Sl (‚Öâ' as)

app-elim : ‚àÄ {Œì e as H A A' As}
  ‚Üí Œì ‚ä¢d ‚ô≠ (‚Öâ as) # e ‚¶Ç A
  ‚Üí ‚ü¶ H , A ‚üß‚Üí‚ü¶ as , ‚ñ° , As , A' ‚üß
  ‚Üí Œì ‚ä© as ‚áö As
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e ‚ñª as ‚¶Ç A'
app-elim ‚ä¢e none-‚ñ° ‚ä©none‚áö = ‚ä¢e
app-elim ‚ä¢e (have-a spl) (‚ä©cons‚áö ‚ä¢as x) = app-elim (‚ä¢d-app‚áê ‚ä¢e x) spl ‚ä¢as
app-elim ‚ä¢e (have-l spl) (‚ä©consl ‚ä¢as) = app-elim (‚ä¢d-prj ‚ä¢e) spl ‚ä¢as

app-elim' : ‚àÄ {Œì e as H A A' As T}
  ‚Üí Œì ‚ä¢d ‚ô≠ (‚Öâ' as) # e ‚¶Ç A
  ‚Üí ‚ü¶ H , A ‚üß‚Üí‚ü¶ as , œÑ T , As , A' ‚üß
  ‚Üí Œì ‚ä© as ‚áö As
  ‚Üí Œì ‚ä¢d ‚ô≠ ‚àû # e ‚ñª as ‚¶Ç A'
app-elim' ‚ä¢e none-œÑ ‚ä©none‚áö = ‚ä¢e
app-elim' ‚ä¢e (have-a spl) (‚ä©cons‚áö ‚ä¢as x) = app-elim' (‚ä¢d-app‚áê ‚ä¢e x) spl ‚ä¢as
app-elim' ‚ä¢e (have-l spl) (‚ä©consl ‚ä¢as) = app-elim' (‚ä¢d-prj ‚ä¢e) spl ‚ä¢as
  
sound-inf : ‚àÄ {Œì e H A es As A'}
  ‚Üí Œì ‚ä¢a H ‚áõ e ‚áõ A
  ‚Üí ‚ü¶ H , A ‚üß‚Üí‚ü¶ es , ‚ñ° , As , A' ‚üß
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e ‚ñª es ‚¶Ç A'

sound-chk : ‚àÄ {Œì e H A es T As A'}
  ‚Üí Œì ‚ä¢a H ‚áõ e ‚áõ A
  ‚Üí ‚ü¶ H , A ‚üß‚Üí‚ü¶ es , œÑ T , As , A' ‚üß
  ‚Üí Œì ‚ä¢d ‚ô≠ ‚àû # e ‚ñª es ‚¶Ç T

sound-‚â§ : ‚àÄ {Œì A H A' A'' es As}
  ‚Üí Œì ‚ä¢a A ‚â§ H ‚áù A'
  ‚Üí ‚ü¶ H , A' ‚üß‚Üí‚ü¶ es , ‚ñ° , As , A'' ‚üß
  ‚Üí  A ‚â§d ‚ô≠ (‚Öâ es) # A'

sound-‚â§-chk : ‚àÄ {Œì A H A' A'' es As T}
  ‚Üí Œì ‚ä¢a A ‚â§ H ‚áù A'
  ‚Üí ‚ü¶ H , A' ‚üß‚Üí‚ü¶ es , œÑ T , As , A'' ‚üß
  ‚Üí  A ‚â§d ‚ô≠ (‚Öâ' es) # A'

sound-es : ‚àÄ {Œì A‚ÇÅ H A As A' es H'}
  ‚Üí Œì ‚ä¢a A‚ÇÅ ‚â§ H ‚áù A
  ‚Üí ‚ü¶ H , A ‚üß‚Üí‚ü¶ es , H' , As , A' ‚üß
  ‚Üí Œì ‚ä© es ‚áö As

sound-inf-0 : ‚àÄ {Œì e A}
  ‚Üí Œì ‚ä¢a ‚ñ° ‚áõ e ‚áõ A
  ‚Üí Œì ‚ä¢d ‚ô≠ Z # e ‚¶Ç A
sound-inf-0 ‚ä¢e = sound-inf ‚ä¢e none-‚ñ°

sound-chk-0 : ‚àÄ {Œì e A}
  ‚Üí Œì ‚ä¢a œÑ A ‚áõ e ‚áõ A
  ‚Üí Œì ‚ä¢d ‚ô≠ ‚àû # e ‚¶Ç A
sound-chk-0 ‚ä¢e = sound-chk ‚ä¢e none-œÑ

sound-r : ‚àÄ {Œì rs A}
  ‚Üí Œì ‚ä¢r ‚ñ° ‚áõ rs ‚áõ A
  ‚Üí Œì ‚ä¢r ‚ô≠ Z # rs ‚¶Ç A
sound-r ‚ä¢a-nil = ‚ä¢r-nil
sound-r (‚ä¢a-one x) = ‚ä¢r-one (sound-inf-0 x)
sound-r (‚ä¢a-cons x ‚ä¢rs) = ‚ä¢r-cons (sound-inf-0 x) (sound-r ‚ä¢rs)

sound-inf ‚ä¢a-lit none-‚ñ° = ‚ä¢d-int
sound-inf (‚ä¢a-var x) none-‚ñ° = ‚ä¢d-var x
sound-inf (‚ä¢a-ann ‚ä¢e) none-‚ñ° = ‚ä¢d-ann (sound-chk-0 ‚ä¢e)
sound-inf (‚ä¢a-app ‚ä¢e) spl = sound-inf ‚ä¢e (have-a spl)
sound-inf {es = e ‚à∑a es} (‚ä¢a-lam‚ÇÇ ‚ä¢e ‚ä¢e‚ÇÅ) (have-a spl) = subst es (sound-inf ‚ä¢e‚ÇÅ (spl-weaken spl)) (sound-inf-0 ‚ä¢e)
sound-inf (‚ä¢a-sub x ‚ä¢e x‚ÇÅ H‚â¢‚ñ°) spl = app-elim (‚ä¢d-sub' (sound-inf-0 ‚ä¢e) (sound-‚â§ x‚ÇÅ spl)) spl (sound-es x‚ÇÅ spl)
sound-inf (‚ä¢a-rcd x) none-‚ñ° = ‚ä¢d-rcd (sound-r x)
sound-inf (‚ä¢a-prj ‚ä¢e) spl = sound-inf ‚ä¢e (have-l spl)

sound-chk (‚ä¢a-app ‚ä¢e) spl = sound-chk ‚ä¢e (have-a spl)
sound-chk (‚ä¢a-lam‚ÇÅ ‚ä¢e) none-œÑ = ‚ä¢d-lam‚ÇÅ (sound-chk ‚ä¢e none-œÑ)
sound-chk {es = e ‚à∑a es} (‚ä¢a-lam‚ÇÇ ‚ä¢e ‚ä¢e‚ÇÅ) (have-a spl) = subst es (sound-chk ‚ä¢e‚ÇÅ (spl-weaken spl)) (sound-inf-0 ‚ä¢e)
sound-chk ‚ä¢e'@(‚ä¢a-sub pv-e ‚ä¢e A‚â§H H‚â¢‚ñ°) spl rewrite ‚ä¢a-spl-œÑ ‚ä¢e' spl = app-elim' (‚ä¢d-sub' (sound-inf-0 ‚ä¢e) (sound-‚â§-chk A‚â§H spl)) spl (sound-es A‚â§H spl)
sound-chk (‚ä¢a-& ‚ä¢e ‚ä¢e‚ÇÅ) none-œÑ = ‚ä¢d-& (sound-chk ‚ä¢e none-œÑ) (sound-chk ‚ä¢e‚ÇÅ none-œÑ)
sound-chk (‚ä¢a-prj ‚ä¢e) spl = sound-chk ‚ä¢e (have-l spl)

sound-‚â§ ‚â§a-‚ñ° none-‚ñ° = ‚â§d-Z
sound-‚â§ (‚â§a-hint x A‚â§H) (have-a spl) = ‚â§d-arr-S‚áê ‚â§d-refl‚àû (sound-‚â§ A‚â§H spl)
sound-‚â§ (‚â§a-hint-l A‚â§H) (have-l spl) = ‚â§d-rcd-Sl (sound-‚â§ A‚â§H spl)
sound-‚â§ (‚â§a-and-l A‚â§H x) spl = ‚â§d-and‚ÇÅ (sound-‚â§ A‚â§H spl) {!!}
sound-‚â§ (‚â§a-and-r A‚â§H x) spl = ‚â§d-and‚ÇÇ (sound-‚â§ A‚â§H spl) {!!}

sound-‚â§-chk ‚â§a-int none-œÑ = ‚â§d-int‚àû
sound-‚â§-chk ‚â§a-base none-œÑ = ‚â§d-base‚àû
sound-‚â§-chk ‚â§a-top none-œÑ = ‚â§d-top
sound-‚â§-chk (‚â§a-arr A‚â§H A‚â§H‚ÇÅ) none-œÑ = ‚â§d-arr-‚àû (sound-‚â§-chk A‚â§H none-œÑ) (sound-‚â§-chk A‚â§H‚ÇÅ none-œÑ)
sound-‚â§-chk (‚â§a-rcd A‚â§H) none-œÑ = ‚â§d-rcd‚àû (sound-‚â§-chk A‚â§H none-œÑ)
sound-‚â§-chk (‚â§a-hint x A‚â§H) (have-a spl) = ‚â§d-arr-S‚áê ‚â§d-refl‚àû (sound-‚â§-chk A‚â§H spl)
sound-‚â§-chk (‚â§a-hint-l A‚â§H) (have-l spl) = ‚â§d-rcd-Sl (sound-‚â§-chk A‚â§H spl)
sound-‚â§-chk (‚â§a-and-l A‚â§H x) spl = ‚â§d-and‚ÇÅ (sound-‚â§-chk A‚â§H spl) {!!}
sound-‚â§-chk (‚â§a-and-r A‚â§H x) spl = ‚â§d-and‚ÇÇ (sound-‚â§-chk A‚â§H spl) {!!}
sound-‚â§-chk (‚â§a-and A‚â§H A‚â§H‚ÇÅ) none-œÑ = ‚â§d-and (sound-‚â§-chk A‚â§H none-œÑ) (sound-‚â§-chk A‚â§H‚ÇÅ none-œÑ)

sound-es ‚â§a-int none-œÑ = ‚ä©none‚áö
sound-es ‚â§a-base none-œÑ = ‚ä©none‚áö
sound-es ‚â§a-top none-œÑ = ‚ä©none‚áö
sound-es ‚â§a-‚ñ° none-‚ñ° = ‚ä©none‚áö
sound-es (‚â§a-arr A‚â§H A‚â§H‚ÇÅ) none-œÑ = ‚ä©none‚áö
sound-es (‚â§a-rcd A‚â§H) none-œÑ = ‚ä©none‚áö
sound-es (‚â§a-hint x A‚â§H) (have-a spl) = ‚ä©cons‚áö (sound-es A‚â§H spl) (sound-chk-0 x)
sound-es (‚â§a-hint-l A‚â§H) (have-l spl) = ‚ä©consl (sound-es A‚â§H spl)
sound-es (‚â§a-and-l A‚â§H x) spl = sound-es A‚â§H spl
sound-es (‚â§a-and-r A‚â§H x) spl = sound-es A‚â§H spl
sound-es (‚â§a-and A‚â§H A‚â§H‚ÇÅ) none-œÑ = ‚ä©none‚áö
