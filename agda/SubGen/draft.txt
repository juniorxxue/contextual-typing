In this algorithmic system, we should take the Hint type in a slightly different way.

Previously in STLC, Hint cannot affect the inference result of inferrable terms (type information contained in themselves, we use "p" to syntactically distinguish those terms).

What Hint can do in that system is

1. Use the Hint to check the subtyping relation of inferred results. One example is

Γ ⊢ Int → Top ⇒ (λx. x) : Int → Int ⇒ Int → Int

2. Use the Hint to help infer terms which cannot be inferred by themselves. e.g.,

Γ ⊢ Int → Top ⇒ λx. x ⇒ Int → Int

However this intution (rules) cannot apply to the system with intersection types is because we want to use Hint to "affect" the inference result.

Γ ⊢ [1] → Top ⇒ (λx. x) : (Int → Int) & (Bool → Bool) ⇒ Int → Int

-----------------------------------------------
The Properties of Decl. subtyping:  A <:j B
-----------------------------------------------

(refl) if A ~wf~ j then A <:j A
(trans) if A <:j B, and B <:j C then A <:j C

-----------------------------------------------
The Properties of Algo. subtyping: Γ ⊢ A <: H ~> A'
-----------------------------------------------
**A' is a refinement of A**

We proved that there's a subtyping chain that
Γ ⊢ A <: A' <: H

----------------------------------------------
Soundness of Subtyping
----------------------------------------------

if Γ ⊢ A <: H ~> A' then A <:j A' where j = len H

this lemma seems correct, but consider one special case "Top"

if Γ ⊢ A <: Top ~> A then A <:0 A where 0 = len Top

what about

Γ ⊢ A → B <: C → D ~> A' → B' then A → B <:∞ A' → B' where ∞ = len (A → B)

To prove A → B <:∞ A' → B' we need to conclude A' <:∞ A and B <:∞ B'
But we can't get it by inductive hypo, since Γ ⊢ B <: D <-- we don't know whether D is Top

-- ongoing to solve
